[include mainsail.cfg]
[include stealthburner_leds.cfg]
[include TheFilter.cfg]


[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100



[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32h743xx_280028000651323439333335-if00
restart_method: command
##--------------------------------------------------------------------

[mcu nhk]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_rp2040_3136313132037A19-if00

restart_method: command
##--------------------------------------------------------------------

[printer]
kinematics: limited_corexy
max_velocity: 500  
max_x_accel:17000
max_y_accel: 8200
max_accel: 17000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0


[input_shaper]
shaper_type:SMOOTH_ZV
#   A type of the input shaper to use for both X and Y axes. Supported
#   shapers are smooth_zv, smooth_mzv, smooth_ei, smooth_2hump_ei, smooth_zvd_ei,
#   smooth_si, mzv, ei, 2hump_ei.
#shaper_type_x:
#shaper_type_y:
#   If shaper_type is not set, these two parameters can be used to
#   configure different input shapers for X and Y axes. The same
#   values are supported as for shaper_type parameter.
smoother_freq_x: 67.4
#  A frequency (in Hz) of the smooth input shaper for X axis.
smoother_freq_y: 45.8
#  A frequency (in Hz) of the smooth input shaper for Y axis.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1
#   Damping ratios of vibrations of X and Y axes used by input shapers
#   to improve vibration suppression. Default value is 0.1 which is a
#   good all-round value for most printers. In most circumstances this
#   parameter requires no tuning and should not be changed.
#   Note: Damping ratios are not currently supported for input smoothers.
enabled_extruders: extruder

#####################################################################
#   X/Y Stepper Settings
#####################################################################

# [autotune_tmc stepper_x]
# motor: ldo-42sth48-2004mah
# [autotune_tmc stepper_y]
# motor: ldo-42sth48-2004mah
##  B Stepper - Left
##  Connected to HV STEPPER 0
##  Endstop connected to X-ENDSTOP
[stepper_x]
step_pin: PB10
dir_pin: !PB11
enable_pin: !PG0
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: tmc5160_stepper_x:virtual_endstop
# endstop_pin: PC1
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 80   #Max 100
homing_retract_dist: 5
homing_positive_dir: true
high_precision_step_compress: True

##  Make sure to update below for your relevant driver (2209 or 5160)
[tmc5160 stepper_x]
cs_pin: PE15
spi_bus: spi4
diag0_pin: ^!PG1
interpolate: FALSE
run_current: 1.0
sense_resistor: 0.075
home_current: 0.7
driver_SGT: 0

##  A Stepper - Right
##  Connected to HV STEPPER 1
##  Endstop connected to Y-ENDSTOP
[stepper_y]
step_pin: PF15
dir_pin: !PF14
enable_pin: !PE9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
# endstop_pin: PC2
endstop_pin: tmc5160_stepper_y:virtual_endstop
position_min: 0
position_endstop: 308
position_max: 308
homing_speed: 40  #Max 100
homing_retract_dist: 5
homing_positive_dir: true
high_precision_step_compress: True

##  Make sure to update below for your relevant driver (2209 or 5160)
[tmc5160 stepper_y]
cs_pin: PE11
spi_bus: spi4
diag0_pin: ^!PE10
interpolate: FALSE
run_current: 1.0
home_current: 0.7
sense_resistor: 0.075
driver_SGT: 0

 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to STEPPER 0
##  Endstop connected to Z-ENDSTOP
[stepper_z]
step_pin: PD4
dir_pin: PD3
enable_pin: !PD7
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4 
microsteps: 32
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
# position_endstop: -0.5
position_max: 280
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2209 or 5160)
[tmc2209 stepper_z]
uart_pin: PD5
#diag_pin: ^!PD6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Center
##  Connected to STEPPER 1
[stepper_z1]
step_pin: PC12
dir_pin: PC11
enable_pin: !PD2
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4 
microsteps: 32

##  Make sure to update below for your relevant driver (2209 or 5160)
[tmc2209 stepper_z1]
uart_pin: PD0
#diag_pin: ^!PD1
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to STEPPER 2
[stepper_z2]
step_pin: PC9
dir_pin: PC8
enable_pin: !PC10
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4 
microsteps: 32

##  Make sure to update below for your relevant driver (2209 or 5160)
[tmc2209 stepper_z2]
uart_pin: PA8
#diag_pin: ^!PA15
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

##  Connected to STEPPER 0
##  Heater - HEATER
##  Thermistor - TH0
[extruder]
step_pin: nhk:gpio23
dir_pin: !nhk:gpio24
enable_pin: !nhk:gpio25
rotation_distance: 47.088 
gear_ratio: 9:1
microsteps: 16
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: nhk:gpio9
sensor_type: PT1000
sensor_pin: nhk:gpio29
pullup_resistor: 2200
min_temp: 10
max_temp: 350
max_power: 1.0
min_extrude_temp: 170
# pressure_advance: 0
max_extrude_cross_section: 9
max_extrude_only_distance: 150
pressure_advance_model:tanh
nonlinear_offset:0
linearization_velocity:1
pressure_advance_smooth_time:0.02

##  E0 on MOTOR6
##  Connected to STEPPER 4
[tmc2209 extruder]
uart_pin: nhk:gpio0
tx_pin: nhk:gpio1
interpolate: false
run_current: 0.6
sense_resistor: 0.100
stealthchop_threshold: 9999999999999999999


#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
##  SSR Pin - HEATBED
##  Thermistor - TH1
heater_pin: PG11
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PA2
pullup_resistor: 2200
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 0.8
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Probe
#####################################################################

[probe]
##  Inductive Probe
##  Connected to Z-PROBE
##  This probe is not used for Z height, only Quad Gantry Leveling
pin: ^!nhk:gpio10
x_offset: 0
y_offset: 0
#z_offset: .5
speed: 5
samples:3 
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.01
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################

[fan]
##  Print Cooling Fan - FAN0
pin: nhk:gpio6
#tachometer_pin: nhk:gpio17
#tachometer_ppr: 2
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
# off_below: 0.10

[heater_fan hotend_fan]
##  Hotend Fan - FAN1
pin: nhk:gpio5
tachometer_pin: nhk:gpio16
tachometer_ppr: 2
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[controller_fan controller_fan-LEFT]
##  Controller fan - FAN2
pin: PF7
##tachometer_pin: PF6
kick_start_time: 0.5
hardware_pwm:TRUE
fan_speed: 0.8
heater: heater_bed

[controller_fan controller_fan-RIGHT]
##  Controller fan - FAN2
pin: PB3
##tachometer_pin: PF6
kick_start_time: 0.5
hardware_pwm:TRUE
fan_speed: 0.8
heater: heater_bed

#[heater_fan exhaust_fan]
##  Exhaust fan - FAN3
#pin: PF9
#tachometer_pin: PF8
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   Filament sensor
#####################################################################

#[filament_switch_sensor Filament]
#pause_on_runout: True
#runout_gcode: M600
#insert_gcode:
#event_delay: 3.0
#pause_delay: 0.5
#switch_pin: !PC0

#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting (Optional)
## Connected to LED-STRIP
[output_pin caselight]
pin: PE6
pwm:true
hardware_pwm: False
value: 0.20 #startup value
shutdown_value: 0
#value:1
cycle_time: 0.00025

## Neopixel (nitehawk sb)
## Connected to led (nitehawk sb)
[output_pin pcb_led]
pin: !nhk:gpio8

## Neopixel (nitehawk sb)
## Connected to NEOPIXEL (nitehawk sb)
[neopixel rgb_light]
pin: PF10
chain_count: 36
color_order: BGR
initial_RED: 0.2
initial_GREEN: 0.2
initial_BLUE: 0.2


#####################################################################
#   Accelerometer
#####################################################################
[adxl345]
cs_pin: nhk:gpio27
spi_software_sclk_pin: nhk:gpio18
spi_software_mosi_pin: nhk:gpio20
spi_software_miso_pin: nhk:gpio19

[resonance_tester]
accel_chip: adxl345
probe_points:
    150, 150, 20


#####################################################################
#   TH
# #####################################################################
#[temperature_sensor chamber_temp]
## Chamber Temperature - T1
#sensor_type: ATC Semitec 104NT-4-R025H42G
#sensor_pin: nhk:gpio28
#min_temp: 0
#max_temp: 100
#gcode_id: chamber_th

[thermistor CMFB103F3950FANT]
temperature1: 0.0
resistance1: 32116.0
temperature2: 40.0
resistance2: 5309.0
temperature3: 80.0
resistance3: 1228.0

[temperature_sensor nh_temp]
## Nitehawk PCB Sensor
sensor_type: temperature_mcu
sensor_mcu: nhk
min_temp: 0
max_temp: 100
gcode_id: nh_th

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position:150,150
speed:100
z_hop:10

[z_tilt]
z_positions:
  -50, 18
  150, 348
  350, 18
points:
  30, 5
  150, 245
  270, 5

speed: 200
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
min_horizontal_move_z: 1.0
#   The minimum value for horizontal move z to be used when
#   adaptive_horizontal_move_z is enabled.
#   The default is 1mm
adaptive_horizontal_move_z: True

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PG9, EXP1_2=PG12,
    EXP1_3=PG13, EXP1_4=PG14,
    EXP1_5=PC13, EXP1_6=PC14,    # Slot in the socket on this side
    EXP1_7=PC15, EXP1_8=PF0,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PE2, EXP2_4=PE4,
    EXP2_5=PE3, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PE5, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PE4

#####################################################################

[force_move]
enable_force_move: True


#####################################################################
#   Macros
#####################################################################

[gcode_macro COLD_PULL]
description: Performs a cold pull to clean the nozzle on a Voron Trident
gcode:
    {% set filament_type = params.FILAMENT|default('PLA')|string %}
    {% set target_temp = params.TEMP|default(85 if filament_type == 'PLA' else 130)|float %}
    {% set cool_temp = params.COOL_TEMP|default(60)|float %}
    {% set extrude_length = params.EXTRUDE|default(10)|float %}
    {% set retract_length = params.RETRACT|default(50)|float %}
    {% set retract_speed = params.SPEED|default(1000)|float %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Save current state
    SAVE_GCODE_STATE NAME=cold_pull_state

    # Display message
    M117 Starting Cold Pull for {filament_type}
    SET_DISPLAY_TEXT MSG="Starting Cold Pull for {filament_type}"

    # Home the printer and level bed
    G28  ; Home all axes
    Z_TILT_ADJUST  ; Level the bed using Trident's 3-motor Z-tilt
    G28 Z  ; Re-home Z after leveling

    # Move to safe position
    G90  ; Absolute positioning
    G1 X{x_wait} Y{y_wait} Z50 F9000  ; Move to center of bed, 50mm above

    # Enable cold extrusion
    M302 S0  ; Allow cold extrusion

    # Heat extruder to target temperature
    M109 S{target_temp}  ; Set and wait for extruder to reach target temp
    SET_DISPLAY_TEXT MSG="Heating to {target_temp}°C"

    # Extrude a small amount to ensure filament is in nozzle
    G91  ; Relative positioning
    G1 E{extrude_length} F300  ; Extrude filament slowly
    G90  ; Absolute positioning

    # Cool down to a lower temperature for pulling
    M106 S255  ; Turn on part cooling fan to speed up cooling
    M104 S{cool_temp}  ; Set extruder to cooling temp
    SET_DISPLAY_TEXT MSG="Cooling to {cool_temp}°C"
    M109 S{cool_temp}  ; Wait for extruder to reach cooling temp
    M106 S0  ; Turn off part cooling fan

    # Retract filament to perform cold pull
    G91  ; Relative positioning
    G1 E-{retract_length} F{retract_speed}  ; Retract filament
    G90  ; Absolute positioning

    # Notify user to remove filament manually if needed
    M117 Cold Pull complete. Remove filament manually if necessary.
    SET_DISPLAY_TEXT MSG="Cold Pull complete. Remove filament if needed."
    M300 S1000 P500  ; Beep to alert user (if supported)

    # Disable cold extrusion
    M302 S170  ; Restore default minimum extrusion temp (adjust as needed)

    # Restore state
    RESTORE_GCODE_STATE NAME=cold_pull_state

[bed_mesh]
horizontal_move_z: 10
mesh_min:50,50
mesh_max:250,250


[gcode_macro LOAD_FILAMENT]
description: Load filament into extruder with LED feedback
gcode:
    {% set extruder_temp = params.TEMP|default(200)|int %}
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

    SAVE_GCODE_STATE NAME=LOAD_STATE
    SET_DISPLAY_TEXT MSG="Loading filament"
    STATUS_HEATING            # Set sb_leds to heating
    SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=0  # Set rgb_light to yellow
    G90                       # Absolute positioning
    G0 X{x_park} Y{y_park} Z50 F9000  # Move to center, Z50
    M109 S{extruder_temp}     # Heat extruder
    G1 E50 F300               # Extrude 50mm filament
    G1 E10 F100               # Extrude 10mm slowly
    M400                      # Wait for moves
    SET_DISPLAY_TEXT MSG="Filament loaded"
    STATUS_READY              # Set sb_leds to ready
    SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0  # Set rgb_light to green
    RESTORE_GCODE_STATE NAME=LOAD_STATE

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament from extruder with LED feedback
gcode:
    {% set extruder_temp = params.TEMP|default(200)|int %}
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

    SAVE_GCODE_STATE NAME=UNLOAD_STATE
    SET_DISPLAY_TEXT MSG="Unloading filament"
    STATUS_HEATING            # Set sb_leds to heating
    SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=0  # Set rgb_light to yellow
    G90                       # Absolute positioning
    G0 X{x_park} Y{y_park} Z50 F9000  # Move to center, Z50
    M109 S{extruder_temp}     # Heat extruder
    G1 E-70 F300              # Retract 70mm filament
    G1 E-10 F100              # Retract 10mm slowly
    M400                      # Wait for moves
    SET_DISPLAY_TEXT MSG="Filament unloaded"
    STATUS_READY              # Set sb_leds to ready
    SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0  # Set rgb_light to green
    RESTORE_GCODE_STATE NAME=UNLOAD_STATE

[gcode_macro CHAMBER_PREHEAT]
description: Preheat chamber to target temperature with LED feedback
gcode:
    {% set target_chamber = params.TEMP|default(40)|int %}
    {% set bed_temp = params.BED|default(target_chamber + 10)|int %}
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

    SAVE_GCODE_STATE NAME=CHAMBER_PREHEAT_STATE
    SET_DISPLAY_TEXT MSG="Preheating chamber to {target_chamber}C"
    STATUS_HEATING                # Set sb_leds to heating mode
    SET_LED LED=rgb_light RED=0.5 GREEN=0 BLUE=0.5  # Set rgb_light to purple
    G90                           # Absolute positioning
    G0 X{x_park} Y{y_park} Z50 F9000  # Park toolhead at center, Z50

    # Heat bed to assist chamber heating
    M140 S{bed_temp}              # Set bed temperature
    M190 S{bed_temp}              # Wait for bed to reach temperature

    # Wait for chamber temperature (if sensor exists)
    {% if printer["temperature_sensor chamber"] is defined %}
        SET_DISPLAY_TEXT MSG="Waiting for chamber to reach {target_chamber}C"
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
    {% else %}
        SET_DISPLAY_TEXT MSG="No chamber sensor, waiting 10 minutes"
        G4 P600000                # Wait 10 minutes for passive chamber heating
    {% endif %}

    # Finalize
    SET_DISPLAY_TEXT MSG="Chamber preheated"
    STATUS_READY                  # Set sb_leds to ready mode
    SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0  # Set rgb_light to green
    RESTORE_GCODE_STATE NAME=CHAMBER_PREHEAT_STATE

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    Z_TILT_ADJUST
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    #  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(0)|float %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

   SET_DISPLAY_TEXT MSG="Print Starting: Hotend:{target_extruder}c, Bed: {target_bed}c, Chamber: {target_chamber}c" 
  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  CLEAR_PAUSE                    # Clear any pause state
  G90                           # Set absolute positioning
  SET_DISPLAY_TEXT MSG="Homing" # Display homing message
  SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=1  # Set rgb_light to white
  STATUS_HOMING                 # Set SB LEDs to homing mode
  G28                           # Home all axes (X, Y, Z)
  G90                                                   # Absolute position
 
  ##  Uncomment for bed mesh (1 of 3 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  PARK                                                  # Go to center of the bed
  SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}C"
  STATUS_HEATING                # Set SB LEDs to heating mode
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"             # Display info on display
  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak and toggle filter.
  {% if params.BED|int > 90 %}
    M106 S255                                           # Turn on the part cooling fan
    ##  Uncomment if you have a filter.
    #TOGGLE_FILTER                                      # Turn on the filter
    M140 S{target_bed}                                  # Set the target temp for the bed
    ##  Uncomment if you have bed fans.
    #HEATSOAK_CHAMBER CHAMBER_TEMP={target_chamber} 
  {% endif %}
  M190 S{target_bed}                                   # Set the target temp for the bed

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                  # Display info on display
  M109 S150                                            # Heat hotend to 150c

  SET_DISPLAY_TEXT MSG="Z-Tilt Adjust"
  STATUS_LEVELING               # Set SB LEDs to leveling mode
  Z_TILT_ADJUST                 # Perform Z-tilt adjustment
  G28 Z                         # Re-home Z after tilt adjustmen

  ##  Uncomment for bed mesh (2 of 3 for bed mesh)
  BED_MESH_CALIBRATE ADAPTIVE=1                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  PARK                                                  # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  PRIME                                                 # Prime nozzle for printing   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set th = printer.toolhead %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament

    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F3600            ; park nozzle at rear
    
    ##  Uncomment for bed mesh (1 of 3 for bed mesh)
    BED_MESH_CLEAR
    SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0
    ##  Uncomment if you have a filter.
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180

##########
# MACROS #
##########

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    Z_TILT_ADJUST
    G28
    G0 X87.5 Y90 Z30 F3600
    

[gcode_macro PRIME]
gcode:
  {% set x_mid = printer.toolhead.axis_maximum.x|float / 2 %}
  G0 X{x_mid - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90  

[gcode_macro PRINT_TEST_CUBE]
variable_pla_he_temp: 220
variable_pla_bed_temp: 60
variable_abs_he_temp: 265
variable_abs_bed_temp: 110
variable_abs_chamber_temp: 45
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin PRINT TEST CUBE"
    RESPOND TYPE=command MSG="action:prompt_text Which material are you using?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button ABS|_PRINT_CUBE_START MATERIAL=ABS"
    RESPOND TYPE=command MSG="action:prompt_button PLA|_PRINT_CUBE_START MATERIAL=PLA"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _PRINT_CUBE_START]
gcode:
      RESPOND TYPE=command MSG="action:prompt_end"
      {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
      RESPOND MSG="Printing Test Cube in {MATERIAL}"
      {% if MATERIAL == "ABS" %}
         {% set EXTRUDER = printer["gcode_macro PRINT_TEST_CUBE"].abs_he_temp%}
         {% set BED = printer["gcode_macro PRINT_TEST_CUBE"].abs_bed_temp%}
      {% elif MATERIAL == "PLA" %}
         {% set EXTRUDER = printer["gcode_macro PRINT_TEST_CUBE"].pla_he_temp%}
         {% set BED = printer["gcode_macro PRINT_TEST_CUBE"].pla_bed_temp%}
         {% set CHAMBER = 0 %}
      {% else %}
      {% endif %}

   PRINT_START EXTRUDER={EXTRUDER} BED={BED} CHAMBER={CHAMBER}
   SDCARD_PRINT_FILE FILENAME=".micron_test_cube.gcode"

# [gcode_macro PRINT_START]
# description: Start macro for Voron Trident with KAMP adaptive mesh, line purge, and StealthBurner LEDs
# gcode:
#     # Fetch parameters from slicer
#     {% set target_bed = params.BED|int %}
#     {% set target_extruder = params.EXTRUDER|int %}
#     {% set target_chamber = params.CHAMBER|default(40)|int %}
#     {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
#     {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

#     # Initialize printer
#     CLEAR_PAUSE                    # Clear any pause state
#     G90                           # Set absolute positioning
#     SET_DISPLAY_TEXT MSG="Homing" # Display homing message
#     SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=1  # Set rgb_light to white
#     STATUS_HOMING                 # Set SB LEDs to homing mode
#     G28                           # Home all axes (X, Y, Z)

#     # Heat bed to target temperature
#     SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}C"
#     STATUS_HEATING                # Set SB LEDs to heating mode
#     M190 S{target_bed}            # Wait for bed to reach target temperature

#     # Preheat extruder to 150°C for safe probing (e.g., for Tap)
#     SET_DISPLAY_TEXT MSG="Preheating hotend to 150C"
#     M109 S150                     # Wait for extruder to reach 150°C

#     # Level the gantry (Trident-specific)
#     SET_DISPLAY_TEXT MSG="Z-Tilt Adjust"
#     STATUS_LEVELING               # Set SB LEDs to leveling mode
#     Z_TILT_ADJUST                 # Perform Z-tilt adjustment
#     G28 Z                         # Re-home Z after tilt adjustment

#     # Perform adaptive bed mesh with KAMP
#     SET_DISPLAY_TEXT MSG="Adaptive bed mesh"
#     STATUS_MESHING                # Set SB LEDs to meshing mode
#     BED_MESH_CLEAR                # Clear any existing mesh
#     BED_MESH_CALIBRATE ADAPTIVE=1 # Perform KAMP adaptive mesh

#     # Heat extruder to final print temperature
#     SET_DISPLAY_TEXT MSG="Heating hotend to {target_extruder}C"
#     STATUS_HEATING                # Set SB LEDs to heating mode
#     G1 X{x_wait} Y{y_wait} Z15 F9000 # Move to center of bed
#     M107                          # Turn off part cooling fan
#     M109 S{target_extruder}       # Wait for extruder to reach target temp

#     # Wait for chamber temperature (if applicable)
#     {% if target_chamber > 40 %}
#         SET_DISPLAY_TEXT MSG="Waiting for chamber to reach {target_chamber}C"
#         TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={target_chamber}
#     {% endif %}

#     # Perform KAMP line purge
#     SET_DISPLAY_TEXT MSG="Purging"
#     STATUS_PRINTING               # Set SB LEDs to printing mode
#     SETUP_KAMP_LINE_PURGE PURGE_LENGTH=20 # Optional: Adjust purge length (mm)
#     LINE_PURGE                    # Execute KAMP line purge

#     # Finalize setup
#     SET_DISPLAY_TEXT MSG="Starting print"
#     STATUS_PRINTING               # Ensure SB LEDs are in printing mode
#     G90                           # Ensure absolute positioning
#     G92 E0                        # Reset extruder
   

# [gcode_macro PRINT_END]
# description: End macro for Voron Trident with StealthBurner LEDs, RGB light to green, and cleanup
# gcode:
#     # Save current state
#     SAVE_GCODE_STATE NAME=PRINT_END_STATE

#     # Clear display and set LED status
#     SET_DISPLAY_TEXT MSG="Print finished"
#     STATUS_OFF                  # Set SB LEDs to off or idle mode

#     # Turn off heaters and fan
#     M104 S0                     # Turn off extruder heater
#     M140 S0                     # Turn off bed heater
#     M107                        # Turn off part cooling fan

#     # Clear bed mesh
#     BED_MESH_CLEAR              # Remove active bed mesh

#     # Park toolhead safely
#     G90                         # Set absolute positioning
#     {% set z_safe = printer.toolhead.axis_maximum.z|float - 20 %}
#     {% set x_park = printer.toolhead.axis_maximum.x|float - 50 %}
#     {% set y_park = printer.toolhead.axis_maximum.y|float - 50 %}
#     G0 Z{z_safe} F9000          # Move Z to safe height
#     G0 X{x_park} Y{y_park} F9000 # Park toolhead at back-center

#     # Set RGB light to green
#     SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0  # Set rgb_light to pure green

#     # Reset printer state
#     G92 E0                      # Reset extruder
#     SET_GCODE_OFFSET Z=0        # Clear any Z offset
#     SET_IDLE_TIMEOUT TIMEOUT=1800 # Set idle timeout to 30 minutes
#     SET_DISPLAY_TEXT MSG="Ready"

#     # Restore state
#     RESTORE_GCODE_STATE NAME=PRINT_END_STATE

#     # Final LED status
#     STATUS_READY                # Set SB LEDs to ready/idle mode
#     # Set RGB light to green
#     SET_LED LED=rgb_light RED=0 GREEN=1 BLUE=0  # Set rgb_light to pure green


[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.

[pa_test]
size_x: 100   # X dimension tower size  (mm)
size_y: 50    # Y dimension tower size  (mm)
height: 50    # Height of tower (mm)
origin_x: 100 # Center of the bed in X
origin_y: 100 # Center of the bed in Y
layer_height: 0.2 # mm
first_layer_height: 0.24 # mm
perimeters: 2 # Number of perimeters to be printed for the tower
brim_width: 6 # Width of brim (mm)
slow_velocity:   20 # Slowest velocity for PA test segment (mm/s)
medium_velocity: 50 # Medium velocity for PA test segment (mm/s)
fast_velocity:  150 # End velocity for PA test segment (mm/s)
filament_diameter: 1.75

[delayed_gcode start_pa_test]
gcode:
    {% set vars = printer["gcode_macro RUN_PA_TEST"] %}
    PRINT_START
    {% set flow_percent = vars.flow_rate|float * 100.0 %}
    {% if flow_percent > 0 %}
        M221 S{flow_percent}
    {% endif %}
    {% set height = printer.configfile.settings.pa_test.height %}
    {% set pavalue = vars.pa_value %}
    ; If pa_value is 0 then we test the full pa range starting from 0
    {% if  vars.pa_value == 0 %}
        {% if vars.testparam == 0 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.001 ; .01 for bowden
        {% elif vars.testparam == 1 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=OFFSET START=0 FACTOR=.01 ; .02 for bowden
        {% elif vars.testparam == 2 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=TIME_OFFSET START=0 FACTOR=.0001
        {% endif %}
    {% else %}
        ; make sure that delta and start can not be lower then 0
        {% if (vars.pa_value - vars.pa_range <= 0) and (vars.testparam <= 2) %}
            {% set delta = vars.pa_range %}
            {% set start = 0 %}
        {% else %}
            ; calculate the pa range that we want to test
            {% set delta = (vars.pa_value + vars.pa_range)  - (vars.pa_value - vars.pa_range)  %}
            ; calculate the pa start value
            {% set start = vars.pa_value - vars.pa_range %}
        {% endif %}
        {% if vars.testparam == 0 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start} FACTOR={delta / height}
        {% elif vars.testparam == 1 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=OFFSET START={start} FACTOR={delta / height}
        {% elif vars.testparam == 2 %}
            TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=TIME_OFFSET START={start} FACTOR={delta / height}
        {% endif %}
    {% endif %}
    ; PRINT_PA_TOWER must be the last command in the start_pa_test script:
    ; it starts a print and then immediately returns without waiting for the print to finish
    PRINT_PA_TOWER {vars.rawparams} FINAL_GCODE_ID=end_pa_test

[delayed_gcode end_pa_test]
gcode:
    PRINT_END
    RESTORE_GCODE_STATE NAME=PA_TEST_STATE

[gcode_macro RUN_PA_TEST]
variable_bed_temp: -1
variable_hotend_temp: -1
variable_pa_value: 0             # Used for further tuning of pa value. If value is not 0 than the tested pa value will only be +/- (determined by the pa_range variable) around of the pa_value variable
variable_pa_range: 0.03          # Only use if pa_value is set to heigher than 0. Used to set the +/- area around pa_value that should be tested
variable_flow_rate: -1
variable_testparam: 0            # 0 = advance, 1 = offset, 2 = time_offset
variable_rawparams: ''
gcode:
    # Fail early if the required parameters are not provided
    {% if params.NOZZLE is not defined %}
    {action_raise_error('NOZZLE= parameter must be provided')}
    {% endif %}
    {% if params.TARGET_TEMP is not defined %}
    {action_raise_error('TARGET_TEMP= parameter must be provided')}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=bed_temp VALUE={params.BED_TEMP|default(60)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=hotend_temp VALUE={params.TARGET_TEMP}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=pa_value VALUE={params.PA_VALUE|default(0)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=pa_range VALUE={params.PA_RANGE|default(0.01)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(-1)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=testparam VALUE={params.TESTPARAM|default(0)}
    SET_GCODE_VARIABLE MACRO=RUN_PA_TEST VARIABLE=rawparams VALUE="'{rawparams}'"
    SAVE_GCODE_STATE NAME=PA_TEST_STATE
    UPDATE_DELAYED_GCODE ID=start_pa_test DURATION=0.01

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 52.007
#*# pid_ki = 3.650
#*# pid_kd = 185.276
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.648
#*# pid_ki = 4.904
#*# pid_kd = 47.888
#*# pid_version = 1
#*# pid_target = 260.00
#*# pid_tolerance = 0.0200
#*#
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.305375, -0.318500, -0.304750
#*# 	-0.341000, -0.346000, -0.331625
#*# 	-0.324750, -0.331625, -0.315375
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 127.048
#*# max_x = 172.948
#*# min_y = 121.25
#*# max_y = 178.75
#*#
#*# [probe]
#*# z_offset = -0.360
